version: "3.8"

services:
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "${AUTH_SERVICE_PORT:-8600}:${SERVER_PORT:-8600}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-docker}
      - SERVER_PORT=${SERVER_PORT:-8600}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/auth_service?createDatabaseIfNotExist=true&characterEncoding=UTF-8&useUnicode=true&allowMultiQueries=true
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-root}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-secret}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO:-update}
      - SPRING_FLYWAY_ENABLED=${SPRING_FLYWAY_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET:-mySecretJWTKeyForAuthService123456789}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
      - OTP_EXPIRATION=${OTP_EXPIRATION:-300}
      - OTP_MAX_ATTEMPTS=${OTP_MAX_ATTEMPTS:-3}
      - OTP_RESEND_COOLDOWN=${OTP_RESEND_COOLDOWN:-60}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMS_API_KEY=${SMS_API_KEY:-}
      - SMS_API_URL=${SMS_API_URL:-}
      - SMS_SENDER=${SMS_SENDER:-ECOMMERCE}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8502/user-service}
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-false}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:-http://eureka-server:8761/eureka/}
      - SPRING_ZIPKIN_BASE_URL=${SPRING_ZIPKIN_BASE_URL:-http://zipkin:9411/}
      - LOG_FILE_PATH=${LOG_FILE_PATH:-/app/logs}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-auth_service}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-secret}
      - SERVICES_USER_SERVICE_MOCK_ENABLED=${SERVICES_USER_SERVICE_MOCK_ENABLED:-true}
      - SERVICES_NOTIFICATION_SERVICE_MOCK_ENABLED=${SERVICES_NOTIFICATION_SERVICE_MOCK_ENABLED:-true}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - auth-service-data:/app/data
    networks:
      - e-commerce-network
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${SERVER_PORT:-8600}/auth-service/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: auth-service-mysql
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-secret}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-auth_service}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    command: >
      --character-set-server=utf8mb4 
      --collation-server=utf8mb4_unicode_ci
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      --max_connections=200
      --innodb_buffer_pool_size=256M
    volumes:
      - mysql-data:/var/lib/mysql
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - e-commerce-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-secret}",
        ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped

  # Redis for JWT tokens and session management (required)
  redis:
    image: redis:7-alpine
    container_name: auth-service-redis
    ports:
      - "${REDIS_PORT:-6380}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - e-commerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Zipkin for tracing (optional)
  zipkin:
    image: openzipkin/zipkin
    container_name: auth-service-zipkin
    ports:
      - "${ZIPKIN_PORT:-9412}:9411"
    environment:
      - STORAGE_TYPE=mem
    networks:
      - e-commerce-network
    profiles:
      - zipkin

  # Eureka Server (optional)
  eureka-server:
    image: springcloud/eureka
    container_name: auth-service-eureka
    ports:
      - "${EUREKA_PORT:-8762}:8761"
    environment:
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    networks:
      - e-commerce-network
    profiles:
      - eureka

networks:
  e-commerce-network:
    driver: bridge
    name: e-commerce-network

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  auth-service-data:
    driver: local
