services:
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: auth-service-prod
    ports:
      - "${AUTH_SERVICE_PORT:-8600}:${SERVER_PORT:-8600}"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=${SERVER_PORT:-8600}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/auth_service?createDatabaseIfNotExist=true&characterEncoding=UTF-8&useUnicode=true&allowMultiQueries=true&useSSL=true&requireSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-root}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_VALIDATE_ON_MIGRATE=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
      - OTP_EXPIRATION=${OTP_EXPIRATION:-300}
      - OTP_MAX_ATTEMPTS=${OTP_MAX_ATTEMPTS:-3}
      - OTP_RESEND_COOLDOWN=${OTP_RESEND_COOLDOWN:-60}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMS_API_KEY=${SMS_API_KEY}
      - SMS_API_URL=${SMS_API_URL}
      - SMS_SENDER=${SMS_SENDER:-ECOMMERCE}
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8502/user-service}
      - EUREKA_CLIENT_ENABLED=${EUREKA_CLIENT_ENABLED:-true}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:-http://eureka-server:8761/eureka/}
      - SPRING_ZIPKIN_BASE_URL=${SPRING_ZIPKIN_BASE_URL:-http://zipkin:9411/}
      - LOG_FILE_PATH=${LOG_FILE_PATH:-/app/logs}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-auth_service}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SERVICES_USER_SERVICE_MOCK_ENABLED=false
      - SERVICES_NOTIFICATION_SERVICE_MOCK_ENABLED=false
      - JAVA_OPTS=-Xmx1024m -Xms512m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - auth-service-data:/app/data:rw
    networks:
      - e-commerce-network
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${SERVER_PORT:-8600}/auth-service/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  mysql:
    image: mysql:8.0
    container_name: auth-service-mysql-prod
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-auth_service}
      - MYSQL_USER=${MYSQL_USER:-auth_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    command: >
      --character-set-server=utf8mb4 
      --collation-server=utf8mb4_unicode_ci
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      --max_connections=300
      --innodb_buffer_pool_size=512M
      --innodb_log_file_size=256M
      --innodb_flush_log_at_trx_commit=2
      --innodb_flush_method=O_DIRECT
      --query_cache_type=1
      --query_cache_size=64M
      --slow_query_log=1
      --long_query_time=2
      --general_log=0
    volumes:
      - mysql-data:/var/lib/mysql:rw
      - mysql-logs:/var/log/mysql:rw
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d:ro
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - e-commerce-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for JWT tokens and session management (production)
  redis:
    image: redis:7-alpine
    container_name: auth-service-redis-prod
    ports:
      - "${REDIS_PORT:-6380}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server 
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data:rw
      - redis-logs:/var/log/redis:rw
    networks:
      - e-commerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: auth-service-nginx-prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx:rw
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - e-commerce-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - nginx

  # Redis Sentinel for high availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: auth-service-redis-sentinel-prod
    ports:
      - "${REDIS_SENTINEL_PORT:-26379}:26379"
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --sentinel
    volumes:
      - ./docker/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
      - redis-sentinel-data:/data:rw
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - e-commerce-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"
    profiles:
      - sentinel

networks:
  e-commerce-network:
    driver: bridge
    name: e-commerce-network

volumes:
  mysql-data:
    driver: local
  mysql-logs:
    driver: local
  redis-data:
    driver: local
  redis-logs:
    driver: local
  redis-sentinel-data:
    driver: local
  nginx-logs:
    driver: local
  auth-service-data:
    driver: local
